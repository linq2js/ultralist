{"version":3,"sources":["../index.js"],"names":["arrayMethods","split","create","items","subLists","list","subscribers","clearListCache","Object","keys","forEach","listName","processedItems","orderedItems","length","modifyItems","callback","__immutable","newItems","slice","newList","__chainable","subscriber","assign","reduce","prototype","method","args","result","listResult","subscribe","push","filter","x","chainable","value","immuatable","clone","item","index","arguments","remove","predicate","count","removedItems","define","order","Array","get","includeMeta","subList","indexedItems","map","filteredItems","sort","a","b","getter","by","aValue","bValue","desc","extra","extraData"],"mappings":"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","file":"index.js","sourcesContent":["const arrayMethods = 'push pop shift unshift splice slice indexOf find findIndex toString map'.split(\r\n  /\\s+/\r\n);\r\n\r\nexport default function create(...items) {\r\n  let subLists = {};\r\n  let list;\r\n  let subscribers = [];\r\n\r\n  function clearListCache() {\r\n    Object.keys(subLists).forEach(listName => {\r\n      delete subLists[listName].processedItems;\r\n      delete subLists[listName].orderedItems;\r\n    });\r\n    list.length = items.length;\r\n  }\r\n\r\n  function modifyItems(callback) {\r\n    if (list.__immutable) {\r\n      const newItems = items.slice();\r\n      callback(newItems);\r\n      const newList = create(...callback(newItems));\r\n      newList.__chainable = list.__chainable;\r\n      return newList;\r\n    }\r\n    clearListCache();\r\n    callback(items);\r\n    subscribers.forEach(subscriber => subscriber(items));\r\n    return list;\r\n  }\r\n\r\n  return (list = Object.assign(\r\n    arrayMethods.reduce((prototype, method) => {\r\n      prototype[method] = function(...args) {\r\n        let result;\r\n        const listResult = modifyItems(\r\n          items => (result = items[method](...args))\r\n        );\r\n        if (list.__chainable || method === 'push' || method === 'unshift')\r\n          return listResult;\r\n        return result;\r\n      };\r\n      return prototype;\r\n    }, {}),\r\n    {\r\n      length: items.length,\r\n      /**\r\n       * subscribe changed event\r\n       */\r\n      subscribe(subscriber) {\r\n        subscribers.push(subscriber);\r\n        return list.__chainable\r\n          ? list\r\n          : () => (subscribers = subscribers.filter(x => x !== subscriber));\r\n      },\r\n      /**\r\n       * make the list is chainable\r\n       */\r\n      chainable(value = true) {\r\n        if (list.__chainable === value) return list;\r\n        const newList = create(...items);\r\n        newList.__chainable = value;\r\n        newList.__immutable = list.__immutable;\r\n        return newList;\r\n      },\r\n      /**\r\n       * make the list is immutable\r\n       */\r\n      immuatable(value = true) {\r\n        if (list.__immutable === value) return list;\r\n        const newList = create(...items);\r\n        newList.__immutable = value;\r\n        newList.__chainable = list.__chainable;\r\n        return newList;\r\n      },\r\n      /**\r\n       * clone list\r\n       */\r\n      clone(...args) {\r\n        return create(...items.slice(...args));\r\n      },\r\n      /**\r\n       * get original items\r\n       */\r\n      items() {\r\n        return items;\r\n      },\r\n      /**\r\n       * get/set item by its index\r\n       */\r\n      item(index, value) {\r\n        if (arguments.length === 1) return items[index];\r\n        return modifyItems(items => (items[index] = value));\r\n      },\r\n      /**\r\n       * remove items which is satisfied predicate\r\n       */\r\n      remove(predicate, count = 0) {\r\n        let removedItems = 0;\r\n        const newItems = items.filter(item => {\r\n          if (count && removedItems >= count) return true;\r\n          if (predicate(item)) {\r\n            removedItems++;\r\n            return false;\r\n          }\r\n          return true;\r\n        });\r\n        if (removedItems) {\r\n          if (list.__immutable) {\r\n            return create(...newItems);\r\n          }\r\n\r\n          items = newItems;\r\n          clearListCache();\r\n        }\r\n\r\n        return list;\r\n      },\r\n      /**\r\n       * define sub list with specified options: { filter, order }\r\n       */\r\n      define(listName, { filter, order } = {}) {\r\n        if (order && !(order instanceof Array)) {\r\n          order = [order];\r\n        }\r\n        subLists[listName] = { filter, order };\r\n        return list;\r\n      },\r\n      /**\r\n       * get sub list\r\n       * @listName string name defined sub list\r\n       * @includeMeta boolean returns array that contains item and its metadata { order: number, item: object, index: number } if true unless returns filtered and sorted items\r\n       */\r\n      get(listName = 'default', includeMeta = false) {\r\n        let subList = subLists[listName];\r\n        if (!subList) {\r\n          // create default list with no filter and no order\r\n          subLists[listName] = subList = {};\r\n        }\r\n\r\n        if (!subList.processedItems) {\r\n          const indexedItems = items.map((item, index) => ({ index, item }));\r\n          const filteredItems = subList.filter\r\n            ? indexedItems.filter(x => subList.filter(x.item))\r\n            : indexedItems;\r\n          const orderedItems = subList.order\r\n            ? filteredItems.slice().sort((a, b) => {\r\n              for (let index = 0; index < subList.order.length; index++) {\r\n                const order = subList.order[index];\r\n                const getter = order.by;\r\n                const aValue = getter(a.item);\r\n                const bValue = getter(b.item);\r\n                if (aValue > bValue) return order.desc ? -1 : 1;\r\n                if (aValue < bValue) return order.desc ? 1 : -1;\r\n              }\r\n              return 0;\r\n            })\r\n            : filteredItems;\r\n\r\n          orderedItems.forEach((x, index) => (x.order = index));\r\n\r\n          subList.processedItems = filteredItems;\r\n          subList.orderedItems = orderedItems.map(x => x.item);\r\n\r\n          if (subList.extra) {\r\n            subList.extraData =\r\n              subList.extra(subList.processedItems, subList.orderedItems) || {};\r\n          }\r\n        }\r\n\r\n        if (typeof includeMeta === 'string')\r\n          return subList.extraData[includeMeta];\r\n\r\n        return includeMeta ? subList.processedItems : subList.orderedItems;\r\n      }\r\n    }\r\n  ));\r\n}\r\n"]}