{"version":3,"sources":["../index.js"],"names":["arrayMethods","split","create","items","subLists","list","subscribers","filters","orders","clearListCache","Object","keys","forEach","listName","processedItems","orderedItems","length","dispatch","subscriber","modifyItems","callback","__immutable","newItems","slice","newList","__chainable","doFilter","filter","Error","x","item","doSort","order","sort","a","b","index","o","getter","by","aValue","bValue","desc","assign","reduce","prototype","method","args","result","listResult","update","predicate","updater","count","updatedItems","map","subscribe","push","chainable","value","immuatable","clone","arguments","remove","removedItems","define","options","type","name","Function","Array","get","includeMeta","subList","indexOf","feature","indexedItems","filteredItems","extra","extraData"],"mappings":"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","file":"index.js","sourcesContent":["const arrayMethods = 'push pop shift unshift splice slice indexOf find findIndex toString map'.split(\r\n  /\\s+/\r\n);\r\n\r\nexport default function create(...items) {\r\n  let subLists = {};\r\n  let list;\r\n  let subscribers = [];\r\n  const filters = {};\r\n  const orders = {};\r\n\r\n  function clearListCache() {\r\n    Object.keys(subLists).forEach(listName => {\r\n      delete subLists[listName].processedItems;\r\n      delete subLists[listName].orderedItems;\r\n    });\r\n    list.length = items.length;\r\n  }\r\n\r\n  function dispatch() {\r\n    subscribers.forEach(subscriber => subscriber(items));\r\n  }\r\n\r\n  function modifyItems(callback) {\r\n    if (list.__immutable) {\r\n      const newItems = items.slice();\r\n      callback(newItems);\r\n      const newList = create(...callback(newItems));\r\n      newList.__chainable = list.__chainable;\r\n      return newList;\r\n    }\r\n    clearListCache();\r\n    callback(items);\r\n    list.length = items.length;\r\n    dispatch();\r\n    return list;\r\n  }\r\n\r\n  function doFilter(filter, items) {\r\n    if (typeof filter === 'string') {\r\n      filter = filters[filter];\r\n\r\n      if (!filter) {\r\n        throw new Error(`Filter named ${filter} cannot be found`);\r\n      }\r\n    }\r\n\r\n    return items.filter(x => filter(x.item));\r\n  }\r\n\r\n  function doSort(order, items) {\r\n    if (typeof order === 'string') {\r\n      order = orders[order];\r\n\r\n      if (!order) {\r\n        throw new Error(`Order named ${order} cannot be found`);\r\n      }\r\n    }\r\n\r\n    return items.slice().sort((a, b) => {\r\n      for (let index = 0; index < order.length; index++) {\r\n        const o = order[index];\r\n        const getter = o.by;\r\n        const aValue = getter(a.item);\r\n        const bValue = getter(b.item);\r\n        if (aValue > bValue) return o.desc ? -1 : 1;\r\n        if (aValue < bValue) return o.desc ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  return (list = Object.assign(\r\n    arrayMethods.reduce((prototype, method) => {\r\n      prototype[method] = function(...args) {\r\n        let result;\r\n        const listResult = modifyItems(\r\n          items => (result = items[method](...args))\r\n        );\r\n        if (list.__chainable || method === 'push' || method === 'unshift')\r\n          return listResult;\r\n        return result;\r\n      };\r\n      return prototype;\r\n    }, {}),\r\n    {\r\n      length: items.length,\r\n      /**\r\n       * update all items which is satisfied predicate\r\n       */\r\n      update(predicate, updater, count = 0) {\r\n        let updatedItems = 0;\r\n        const newItems = items.map((item, index) => {\r\n          if (count && updatedItems >= count) return item;\r\n          if (predicate(item)) {\r\n            updatedItems++;\r\n            return updater(item, index);\r\n          }\r\n          return item;\r\n        });\r\n        if (updatedItems) {\r\n          if (list.__immutable) {\r\n            return create(...newItems);\r\n          }\r\n\r\n          items = newItems;\r\n          clearListCache();\r\n          dispatch();\r\n        }\r\n\r\n        return list;\r\n      },\r\n      /**\r\n       * subscribe changed event\r\n       */\r\n      subscribe(subscriber) {\r\n        subscribers.push(subscriber);\r\n        return list.__chainable\r\n          ? list\r\n          : () => (subscribers = subscribers.filter(x => x !== subscriber));\r\n      },\r\n      /**\r\n       * make the list is chainable\r\n       */\r\n      chainable(value = true) {\r\n        if (list.__chainable === value) return list;\r\n        const newList = create(...items);\r\n        newList.__chainable = value;\r\n        newList.__immutable = list.__immutable;\r\n        return newList;\r\n      },\r\n      /**\r\n       * make the list is immutable\r\n       */\r\n      immuatable(value = true) {\r\n        if (list.__immutable === value) return list;\r\n        const newList = create(...items);\r\n        newList.__immutable = value;\r\n        newList.__chainable = list.__chainable;\r\n        return newList;\r\n      },\r\n      /**\r\n       * clone list\r\n       */\r\n      clone(...args) {\r\n        return create(...items.slice(...args));\r\n      },\r\n      /**\r\n       * get original items\r\n       */\r\n      items() {\r\n        return items;\r\n      },\r\n      /**\r\n       * get/set item by its index\r\n       */\r\n      item(index, value) {\r\n        if (arguments.length === 1) return items[index];\r\n        return modifyItems(items => (items[index] = value));\r\n      },\r\n      /**\r\n       * remove items which is satisfied predicate\r\n       */\r\n      remove(predicate, count = 0) {\r\n        let removedItems = 0;\r\n        const newItems = items.filter(item => {\r\n          if (count && removedItems >= count) return true;\r\n          if (predicate(item)) {\r\n            removedItems++;\r\n            return false;\r\n          }\r\n          return true;\r\n        });\r\n        if (removedItems) {\r\n          if (list.__immutable) {\r\n            return create(...newItems);\r\n          }\r\n\r\n          items = newItems;\r\n          clearListCache();\r\n          dispatch();\r\n        }\r\n\r\n        return list;\r\n      },\r\n      /**\r\n       * define sub list with specified options: { filter, order }\r\n       */\r\n      define(listName, options = {}) {\r\n        const [type, name] = listName.split(':');\r\n        if (name) {\r\n          switch (type) {\r\n            case 'order':\r\n              if (options instanceof Function) {\r\n                options = { by: options };\r\n              }\r\n              if (!(options instanceof Array)) {\r\n                options = [options];\r\n              }\r\n\r\n              orders[name] = options;\r\n              break;\r\n            case 'filter':\r\n              filters[name] = options;\r\n              break;\r\n            default:\r\n              throw new Error(`Unsupported option ${type}`);\r\n          }\r\n        } else {\r\n          let { filter, order } = options;\r\n          if (order && !(order instanceof Array) && typeof order !== 'string') {\r\n            order = [order];\r\n          }\r\n          subLists[listName] = { filter, order };\r\n        }\r\n\r\n        return list;\r\n      },\r\n      /**\r\n       * get sub list\r\n       * @listName string name defined sub list\r\n       * @includeMeta boolean returns array that contains item and its metadata { order: number, item: object, index: number } if true unless returns filtered and sorted items\r\n       */\r\n      get(listName = 'default', includeMeta = false) {\r\n        let subList = subLists[listName];\r\n        if (!subList) {\r\n          // create default list with no filter and no order\r\n          subLists[listName] = subList = {};\r\n          // list name can be combination of predefined filter/order names\r\n          if (listName.indexOf(':') !== -1) {\r\n            // parse feature list which is separated by spacings\r\n            listName.split(/\\s+/).forEach(feature => {\r\n              // featureType:featureName\r\n              const [type, name] = feature.split(/:/);\r\n              if (!name) {\r\n                // is sub list name, copy all props of referenced sub list to current\r\n                Object.assign(subList, subLists[type]);\r\n              } else {\r\n                subList[type] = name;\r\n              }\r\n            });\r\n          }\r\n        }\r\n\r\n        if (!subList.processedItems) {\r\n          const indexedItems = items.map((item, index) => ({ index, item }));\r\n          const filteredItems = subList.filter\r\n            ? doFilter(subList.filter, indexedItems)\r\n            : indexedItems;\r\n          const orderedItems = subList.order\r\n            ? doSort(subList.order, filteredItems)\r\n            : filteredItems;\r\n\r\n          orderedItems.forEach((x, index) => (x.order = index));\r\n\r\n          subList.processedItems = filteredItems;\r\n          subList.orderedItems = orderedItems.map(x => x.item);\r\n\r\n          if (subList.extra) {\r\n            subList.extraData =\r\n              subList.extra(subList.processedItems, subList.orderedItems) || {};\r\n          }\r\n        }\r\n\r\n        if (typeof includeMeta === 'string')\r\n          return subList.extraData[includeMeta];\r\n\r\n        return includeMeta ? subList.processedItems : subList.orderedItems;\r\n      }\r\n    }\r\n  ));\r\n}\r\n"]}